{"version":3,"sources":["../../node_modules/invariant/browser.js","../../node_modules/redux-actions/es/utils/isFunction.js","../../node_modules/redux-actions/es/utils/identity.js","../../node_modules/redux-actions/es/utils/isNull.js","../../node_modules/redux-actions/es/createAction.js","components/SimpleButtons/ClickLoadingSuccess.jsx","connects/SimpleButtons/ClickLoadingSuccess.js","components/SimpleButtons/ClickLoadingError.jsx","connects/SimpleButtons/ClickLoadingError.js","components/SimpleButtons/ClickLoading.jsx","connects/SimpleButtons/ClickLoading1.js","connects/SimpleButtons/ClickLoading2.js","connects/SimpleButtons/ClickLoading3.js","components/SimpleButtons/index.jsx"],"names":["module","exports","condition","format","a","b","c","d","e","f","error","undefined","Error","args","argIndex","replace","name","framesToPop","value","createAction","type","payloadCreator","metaCreator","identity","invariant","isFunction","isNull","finalPayloadCreator","head","_len","arguments","length","Array","_key","apply","concat","hasMeta","typeString","toString","actionCreator","payload","action","meta","ClickLoadingSuccess","loading","clicked","onClick","onReset","disabled","className","join","role","aria-hidden","withRedux","connect","createSelector","createSelectActions","get","state","props","actionIds","actions","dispatch","setActionId","unsetActionId","createAsyncAction","ActionTypes","to","idOfAction","compose","withAsyncActionStateHandler","ClickLoadingError","ClickLoading","id","foo","createAsyncActionUnique","SimpleButtons","ClickLoading1","ClickLoading2","ClickLoading3"],"mappings":"2FAgDAA,EAAOC,QA5BS,SAASC,EAAWC,EAAQC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,GAOzD,IAAKP,EAAW,CACd,IAAIQ,EACJ,QAAeC,IAAXR,EACFO,EAAQ,IAAIE,MACV,qIAGG,CACL,IAAIC,EAAO,CAACT,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,GACvBK,EAAW,GACfJ,EAAQ,IAAIE,MACVT,EAAOY,QAAQ,OAAO,WAAa,OAAOF,EAAKC,UAE3CE,KAAO,sBAIf,MADAN,EAAMO,YAAc,EACdP,K,2FC5CM,WAAUQ,GACxB,MAAwB,oBAAVA,GCDA,WAAUA,GACxB,OAAOA,GCDO,WAAUA,GACxB,OAAiB,OAAVA,GCGM,SAASC,EAAaC,EAAMC,EAAgBC,QAClC,IAAnBD,IACFA,EAAiBE,GAGnBC,IAAUC,EAAWJ,IAAmBK,EAAOL,GAAiB,+DAChE,IAAIM,EAAsBD,EAAOL,IAAmBA,IAAmBE,EAAWA,EAAW,SAAUK,GACrG,IAAK,IAAIC,EAAOC,UAAUC,OAAQlB,EAAO,IAAImB,MAAMH,EAAO,EAAIA,EAAO,EAAI,GAAII,EAAO,EAAGA,EAAOJ,EAAMI,IAClGpB,EAAKoB,EAAO,GAAKH,UAAUG,GAG7B,OAAOL,aAAgBhB,MAAQgB,EAAOP,EAAea,WAAM,EAAQ,CAACN,GAAMO,OAAOtB,KAE/EuB,EAAUX,EAAWH,GACrBe,EAAajB,EAAKkB,WAElBC,EAAgB,WAClB,IAAIC,EAAUb,EAAoBO,WAAM,EAAQJ,WAC5CW,EAAS,CACXrB,KAAMA,GAeR,OAZIoB,aAAmB5B,QACrB6B,EAAO/B,OAAQ,QAGDC,IAAZ6B,IACFC,EAAOD,QAAUA,GAGfJ,IACFK,EAAOC,KAAOpB,EAAYY,WAAM,EAAQJ,YAGnCW,GAOT,OAJAF,EAAcD,SAAW,WACvB,OAAOD,GAGFE,I,uGCtBMI,MAvBa,EAAEC,UAASlC,QAAOmC,UAASC,UAASC,aAC5D,4BACI3B,KAAK,SACL0B,QAASD,EAAUE,EAAUD,EAC7BE,UAAsB,IAAZJ,EACVK,UAAW,CACP,OACa,IAAZL,GAAqBC,EAA2B,GAAhB,cAChCA,QAAuBlC,IAAZiC,EAAyB,cAAgB,IAEvDM,KAAK,OAGS,IAAZN,GACI,0BAAMK,UAAU,mCAAmCE,KAAK,SAASC,cAAY,UAGnFP,GAAW,2CACA,IAAZD,GAAoB,cACpBC,IAAYnC,IAAUkC,GAAW,iCCZnC,MA2BDS,EAAYC,YAtBU,IAAMC,YALCC,YAC/BC,cAAI,WACJ,CAACC,EAAOC,IAAUA,EAAMC,WAKxB,CAACF,EAAOC,IAAUA,EAAMC,UACxB,CAACC,EAASD,KAAV,CACIf,UAAWe,EAAUd,QACrBF,QAASa,cAAI,CAAC,UAAW,aAAcI,GACvCnD,MAAO+C,cAAI,CAAC,UAAW,SAAUI,MAId,CAACC,GAAWC,cAAaC,oBAAzB,CACvBlB,QAAS,KACL,MAAML,EAASqB,EACXG,YAAkBC,IAAlBD,CAA0C,CAACE,GAAI,aAEnDJ,EAAY,UAAWK,YAAW3B,KAEtCM,QAAS,KACLiB,EAAc,eAMPK,wBACXC,cACAjB,EAFWgB,CAGb1B,G,UCrBa4B,MAlBW,EAAE3B,UAASlC,QAAOoC,UAASC,aACjD,4BACI3B,KAAK,SACL0B,QAASpC,EAAQqC,EAAUD,EAC3BE,UAAsB,IAAZJ,EACVK,UAAS,eAAqB,IAAZL,GAAqB,cAA9B,YAA+ClC,GAAS,gBAGjD,IAAZkC,GACI,0BAAMK,UAAU,mCAAmCE,KAAK,SAASC,cAAY,cAGxEzC,IAAZiC,IAA0BlC,GAAS,yCACvB,IAAZkC,GAAoB,cACpBlC,GAAS,+BCNX,MA0BD2C,EAAYC,YArBU,IAAMC,YALCC,YAC/BC,cAAI,WACJ,CAACC,EAAOC,IAAUA,EAAMC,WAKxBC,IAAW,CACPjB,QAASa,cAAI,CAAC,UAAW,aAAcI,GACvCnD,MAAO+C,cAAI,CAAC,UAAW,SAAUI,MAId,CAACC,GAAWF,YAAWG,cAAaC,oBAApC,CACvBlB,QAAS,KACL,MAAML,EAASqB,EACXG,YAAkBC,IAAlBD,CAA0C,CAACE,GAAI,UAEnDJ,EAAY,UAAWK,YAAW3B,KAEtCM,QAAS,KACLiB,EAAc,WACdF,EAAS3C,YAAa+C,IAAb/C,CAAkCyC,EAAUd,cAM9CuB,wBACXC,cACAjB,EAFWgB,CAGbE,G,QCxBaC,MAfM,EAAEC,KAAI7B,UAASE,aAChC,4BACI1B,KAAK,SACL0B,QAASA,EACTE,UAAsB,IAAZJ,EACVK,UAAU,mBAJd,YAMUwB,EANV,OAOK7B,GACG,0BAAMK,UAAU,mCAAmCE,KAAK,SAASC,cAAY,SAEhFR,EAAU,cAAgB,oBCH5B,MAoBDS,EAAYC,YAfU,IAAMC,YALCC,YAC/BC,cAAI,WACJ,CAACC,EAAOC,IAAUA,EAAMC,WAKxBC,IAAW,CACPY,GAAI,EACJ7B,QAASa,cAAI,CAAC,UAAW,aAAcI,MAIpB,CAACC,EAAUH,KAAX,CACvBb,QAAS,KACL,MAAML,EAASqB,EAASG,YAAkBC,IAAlBD,CAA0C,CAACE,GAAI,UAAWO,IAAK,SACvFf,EAAMI,YAAY,UAAWK,YAAW3B,QAMjC4B,kBACXC,cACAjB,EAFWgB,CAGbG,GCzBK,MAoBDnB,EAAYC,YAfU,IAAMC,YALCC,YAC/BC,cAAI,WACJ,CAACC,EAAOC,IAAUA,EAAMC,WAKxBC,IAAW,CACPY,GAAI,EACJ7B,QAASa,cAAI,CAAC,UAAW,aAAcI,MAIpB,CAACC,EAAUH,KAAX,CACvBb,QAAS,KACL,MAAML,EAASqB,EAASG,YAAkBC,IAAlBD,CAA0C,CAACE,GAAI,UAAWO,IAAK,SACvFf,EAAMI,YAAY,UAAWK,YAAW3B,QAMjC4B,kBACXC,cACAjB,EAFWgB,CAGbG,GCzBK,MAoBDnB,EAAYC,YAfU,IAAMC,YALCC,YAC/BC,cAAI,WACJ,CAACC,EAAOC,IAAUA,EAAMC,WAKxBC,IAAW,CACPY,GAAI,EACJ7B,QAASa,cAAI,CAAC,UAAW,aAAcI,MAIpB,CAACC,EAAUH,KAAX,CACvBb,QAAS,KACL,MAAML,EAASqB,EAASa,YAAwBT,IAAxBS,CAAgD,CAACR,GAAI,UAAWO,IAAK,SAC7Ff,EAAMI,YAAY,UAAWK,YAAW3B,QAMjC4B,kBACXC,cACAjB,EAFWgB,CAGbG,GCQiBI,UAlCG,IAClB,oCACI,yBAAK3B,UAAU,WACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,WACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,WAAf,6EAGA,yBAAKA,UAAU,WAAf,8CAGA,yBAAKA,UAAU,WAAf,iGAIA,yBAAKA,UAAU,WAAf,qCAEI,6FAEJ,yBAAKA,UAAU,WACX,kBAAC4B,EAAD,OAEJ,yBAAK5B,UAAU,WACX,kBAAC6B,EAAD,OAEJ,yBAAK7B,UAAU,WACX,kBAAC8B,EAAD","file":"static/js/SimpleButtons.e74df80907c0c8b4a4c0.chunk.js","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","export default (function (value) {\n  return typeof value === 'function';\n});","export default (function (value) {\n  return value;\n});","export default (function (value) {\n  return value === null;\n});","import invariant from 'invariant';\nimport isFunction from './utils/isFunction';\nimport identity from './utils/identity';\nimport isNull from './utils/isNull';\nexport default function createAction(type, payloadCreator, metaCreator) {\n  if (payloadCreator === void 0) {\n    payloadCreator = identity;\n  }\n\n  invariant(isFunction(payloadCreator) || isNull(payloadCreator), 'Expected payloadCreator to be a function, undefined or null');\n  var finalPayloadCreator = isNull(payloadCreator) || payloadCreator === identity ? identity : function (head) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return head instanceof Error ? head : payloadCreator.apply(void 0, [head].concat(args));\n  };\n  var hasMeta = isFunction(metaCreator);\n  var typeString = type.toString();\n\n  var actionCreator = function actionCreator() {\n    var payload = finalPayloadCreator.apply(void 0, arguments);\n    var action = {\n      type: type\n    };\n\n    if (payload instanceof Error) {\n      action.error = true;\n    }\n\n    if (payload !== undefined) {\n      action.payload = payload;\n    }\n\n    if (hasMeta) {\n      action.meta = metaCreator.apply(void 0, arguments);\n    }\n\n    return action;\n  };\n\n  actionCreator.toString = function () {\n    return typeString;\n  };\n\n  return actionCreator;\n}","const ClickLoadingSuccess = ({loading, error, clicked, onClick, onReset}) => (\n    <button\n        type=\"button\"\n        onClick={clicked ? onReset : onClick}\n        disabled={loading === true}\n        className={[\n            'btn',\n            (loading === true || !clicked) ? 'btn-primary' : '',\n            (clicked && loading === undefined) ? 'btn-success' : '',\n\n        ].join(' ')}\n    >\n        {\n            loading === true && (\n                <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\" />\n            )\n        }\n        {!clicked && 'Click to be Loading, then to be Success'}\n        {loading === true && ' Loading...'}\n        {clicked && !error && !loading && 'Success! Click again to reset'}\n    </button>\n);\n\nexport default ClickLoadingSuccess;\n","import {connect} from 'react-redux';\nimport {compose, get} from 'lodash/fp';\nimport {createSelector} from 'reselect';\nimport {createAsyncAction, idOfAction, createSelectActions, withAsyncActionStateHandler} from 'redux-saga-mate';\nimport * as ActionTypes from '../../actions/types';\nimport ClickLoadingSuccess from '../../components/SimpleButtons/ClickLoadingSuccess';\n\nexport const selectActions = () => createSelectActions(\n    get('actions'),\n    (state, props) => props.actionIds,\n);\n\nconst makeMapStateToProps = () => createSelector(\n    selectActions(),\n    (state, props) => props.actionIds,\n    (actions, actionIds) => ({\n        clicked: !!actionIds.onClick,\n        loading: get(['onClick', 'isLoading'], actions),\n        error: get(['onClick', 'error'], actions),\n    }),\n);\n\nconst mapDispatchToProps = (dispatch, {setActionId, unsetActionId}) => ({\n    onClick: () => {\n        const action = dispatch(\n            createAsyncAction(ActionTypes.ASYNC_NOOP)({to: 'success'}),\n        );\n        setActionId('onClick', idOfAction(action));\n    },\n    onReset: () => {\n        unsetActionId('onClick');\n    },\n});\n\nconst withRedux = connect(makeMapStateToProps, mapDispatchToProps);\n\nexport default compose(\n    withAsyncActionStateHandler(),\n    withRedux,\n)(ClickLoadingSuccess);\n","const ClickLoadingError = ({loading, error, onClick, onReset}) => (\n    <button\n        type=\"button\"\n        onClick={error ? onReset : onClick}\n        disabled={loading === true}\n        className={`btn ${loading !== false && 'btn-primary'} ${error && 'btn-danger'}`}\n    >\n        {\n            loading === true && (\n                <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\" />\n            )\n        }\n        {loading === undefined && !error && 'Click to be Loading, then to be Error'}\n        {loading === true && ' Loading...'}\n        {error && 'Error! Click again to reset'}\n    </button>\n);\n\nexport default ClickLoadingError;\n","import {connect} from 'react-redux';\nimport {createAction} from 'redux-actions';\nimport {compose, get} from 'lodash/fp';\nimport {createSelector} from 'reselect';\nimport {createAsyncAction, idOfAction, createSelectActions, withAsyncActionStateHandler} from 'redux-saga-mate';\nimport * as ActionTypes from '../../actions/types';\nimport ClickLoadingError from '../../components/SimpleButtons/ClickLoadingError';\n\nexport const selectActions = () => createSelectActions(\n    get('actions'),\n    (state, props) => props.actionIds,\n);\n\nconst makeMapStateToProps = () => createSelector(\n    selectActions(),\n    actions => ({\n        loading: get(['onClick', 'isLoading'], actions),\n        error: get(['onClick', 'error'], actions),\n    }),\n);\n\nconst mapDispatchToProps = (dispatch, {actionIds, setActionId, unsetActionId}) => ({\n    onClick: () => {\n        const action = dispatch(\n            createAsyncAction(ActionTypes.ASYNC_NOOP)({to: 'fail'}),\n        );\n        setActionId('onClick', idOfAction(action));\n    },\n    onReset: () => {\n        unsetActionId('onClick');\n        dispatch(createAction(ActionTypes.CLEANUP)(actionIds.onClick));\n    },\n});\n\nconst withRedux = connect(makeMapStateToProps, mapDispatchToProps);\n\nexport default compose(\n    withAsyncActionStateHandler(),\n    withRedux,\n)(ClickLoadingError);\n","const ClickLoading = ({id, loading, onClick}) => (\n    <button\n        type=\"button\"\n        onClick={onClick}\n        disabled={loading === true}\n        className=\"btn btn-primary\"\n    >\n        {`[ ${id} ] `}\n        {loading && (\n            <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\" />\n        )}\n        {loading ? ' Loading...' : 'Click to Loading'}\n    </button>\n);\n\nexport default ClickLoading;\n","import {connect} from 'react-redux';\nimport {get} from 'lodash/fp';\nimport {compose} from 'recompose';\nimport {createSelector} from 'reselect';\nimport {createAsyncAction, idOfAction, createSelectActions, withAsyncActionStateHandler} from 'redux-saga-mate';\nimport * as ActionTypes from '../../actions/types';\nimport ClickLoading from '../../components/SimpleButtons/ClickLoading';\n\nexport const selectActions = () => createSelectActions(\n    get('actions'),\n    (state, props) => props.actionIds,\n);\n\nconst makeMapStateToProps = () => createSelector(\n    selectActions(),\n    actions => ({\n        id: 1,\n        loading: get(['onClick', 'isLoading'], actions),\n    }),\n);\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    onClick: () => {\n        const action = dispatch(createAsyncAction(ActionTypes.ASYNC_NOOP)({to: 'success', foo: 'foo'}));\n        props.setActionId('onClick', idOfAction(action));\n    },\n});\n\nconst withRedux = connect(makeMapStateToProps, mapDispatchToProps);\n\nexport default compose(\n    withAsyncActionStateHandler(),\n    withRedux,\n)(ClickLoading);\n","import {connect} from 'react-redux';\nimport {get} from 'lodash/fp';\nimport {compose} from 'recompose';\nimport {createSelector} from 'reselect';\nimport {createAsyncAction, idOfAction, createSelectActions, withAsyncActionStateHandler} from 'redux-saga-mate';\nimport * as ActionTypes from '../../actions/types';\nimport ClickLoading from '../../components/SimpleButtons/ClickLoading';\n\nexport const selectActions = () => createSelectActions(\n    get('actions'),\n    (state, props) => props.actionIds,\n);\n\nconst makeMapStateToProps = () => createSelector(\n    selectActions(),\n    actions => ({\n        id: 2,\n        loading: get(['onClick', 'isLoading'], actions),\n    }),\n);\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    onClick: () => {\n        const action = dispatch(createAsyncAction(ActionTypes.ASYNC_NOOP)({to: 'success', foo: 'foo'}));\n        props.setActionId('onClick', idOfAction(action));\n    },\n});\n\nconst withRedux = connect(makeMapStateToProps, mapDispatchToProps);\n\nexport default compose(\n    withAsyncActionStateHandler(),\n    withRedux,\n)(ClickLoading);\n","import {connect} from 'react-redux';\nimport {get} from 'lodash/fp';\nimport {compose} from 'recompose';\nimport {createSelector} from 'reselect';\nimport {createAsyncActionUnique, idOfAction, createSelectActions, withAsyncActionStateHandler} from 'redux-saga-mate';\nimport * as ActionTypes from '../../actions/types';\nimport ClickLoading from '../../components/SimpleButtons/ClickLoading';\n\nexport const selectActions = () => createSelectActions(\n    get('actions'),\n    (state, props) => props.actionIds,\n);\n\nconst makeMapStateToProps = () => createSelector(\n    selectActions(),\n    actions => ({\n        id: 3,\n        loading: get(['onClick', 'isLoading'], actions),\n    }),\n);\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    onClick: () => {\n        const action = dispatch(createAsyncActionUnique(ActionTypes.ASYNC_NOOP)({to: 'success', foo: 'foo'}));\n        props.setActionId('onClick', idOfAction(action));\n    },\n});\n\nconst withRedux = connect(makeMapStateToProps, mapDispatchToProps);\n\nexport default compose(\n    withAsyncActionStateHandler(),\n    withRedux,\n)(ClickLoading);\n","import {hot} from 'react-hot-loader/root';\nimport ClickLoadingSuccess from '../../connects/SimpleButtons/ClickLoadingSuccess';\nimport ClickLoadingError from '../../connects/SimpleButtons/ClickLoadingError';\nimport ClickLoading1 from '../../connects/SimpleButtons/ClickLoading1';\nimport ClickLoading2 from '../../connects/SimpleButtons/ClickLoading2';\nimport ClickLoading3 from '../../connects/SimpleButtons/ClickLoading3';\n\nconst SimpleButtons = () => (\n    <>\n        <div className=\"row m-3\">\n            <ClickLoadingSuccess />\n        </div>\n        <div className=\"row m-3\">\n            <ClickLoadingError />\n        </div>\n        <div className=\"row m-3\">\n            [1] and [2] below dispatch same action. (types and payloads are the same)\n        </div>\n        <div className=\"row m-3\">\n            So they will share the same loading state.\n        </div>\n        <div className=\"row m-3\">\n            But [3] will not share the same loading state,\n            even if its type and payload are the same too.\n        </div>\n        <div className=\"row m-3\">\n            Because we make the action unique:\n            <b>Action Type + Action Payload + Action Time = Action Instance.</b>\n        </div>\n        <div className=\"row m-3\">\n            <ClickLoading1 />\n        </div>\n        <div className=\"row m-3\">\n            <ClickLoading2 />\n        </div>\n        <div className=\"row m-3\">\n            <ClickLoading3 />\n        </div>\n    </>\n);\n\nexport default hot(SimpleButtons);\n"],"sourceRoot":""}