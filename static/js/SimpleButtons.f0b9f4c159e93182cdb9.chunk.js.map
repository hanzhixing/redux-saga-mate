{"version":3,"sources":["components/SimpleButtons/ClickLoadingSuccess.jsx","connects/SimpleButtons/ClickLoadingSuccess.js","components/SimpleButtons/ClickLoadingError.jsx","connects/SimpleButtons/ClickLoadingError.js","components/SimpleButtons/ClickLoading.jsx","connects/SimpleButtons/ClickLoading1.js","connects/SimpleButtons/ClickLoading2.js","connects/SimpleButtons/ClickLoading3.js","components/SimpleButtons/index.jsx"],"names":["ClickLoadingSuccess","loading","error","clicked","onClick","onReset","type","disabled","className","undefined","join","role","aria-hidden","withRedux","connect","createSelector","createSelectActions","get","state","props","actionIds","actions","dispatch","setActionId","unsetActionId","action","createAsyncAction","ActionTypes","to","idOfAction","compose","withAsyncActionStateHandler","ClickLoadingError","createAction","ClickLoading","id","foo","createAsyncActionUnique","SimpleButtons","ClickLoading1","ClickLoading2","ClickLoading3"],"mappings":"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","file":"static/js/SimpleButtons.f0b9f4c159e93182cdb9.chunk.js","sourcesContent":["const ClickLoadingSuccess = ({loading, error, clicked, onClick, onReset}) => (\n    <button\n        type=\"button\"\n        onClick={clicked ? onReset : onClick}\n        disabled={loading === true}\n        className={[\n            'btn',\n            (loading === true || !clicked) ? 'btn-primary' : '',\n            (clicked && loading === undefined) ? 'btn-success' : '',\n\n        ].join(' ')}\n    >\n        {\n            loading === true && (\n                <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\" />\n            )\n        }\n        {!clicked && 'Click to be Loading, then to be Success'}\n        {loading === true && ' Loading...'}\n        {clicked && !error && !loading && 'Success! Click again to reset'}\n    </button>\n);\n\nexport default ClickLoadingSuccess;\n","import {connect} from 'react-redux';\nimport {compose, get} from 'lodash/fp';\nimport {createSelector} from 'reselect';\nimport {createAsyncAction, idOfAction, createSelectActions, withAsyncActionStateHandler} from 'redux-saga-mate';\nimport * as ActionTypes from '../../actions/types';\nimport ClickLoadingSuccess from '../../components/SimpleButtons/ClickLoadingSuccess';\n\nexport const selectActions = () => createSelectActions(\n    get('actions'),\n    (state, props) => props.actionIds,\n);\n\nconst makeMapStateToProps = () => createSelector(\n    selectActions(),\n    (state, props) => props.actionIds,\n    (actions, actionIds) => ({\n        clicked: !!actionIds.onClick,\n        loading: get(['onClick', 'isLoading'], actions),\n        error: get(['onClick', 'error'], actions),\n    }),\n);\n\nconst mapDispatchToProps = (dispatch, {setActionId, unsetActionId}) => ({\n    onClick: () => {\n        const action = dispatch(\n            createAsyncAction(ActionTypes.ASYNC_NOOP)({to: 'success'}),\n        );\n        setActionId('onClick', idOfAction(action));\n    },\n    onReset: () => {\n        unsetActionId('onClick');\n    },\n});\n\nconst withRedux = connect(makeMapStateToProps, mapDispatchToProps);\n\nexport default compose(\n    withAsyncActionStateHandler(),\n    withRedux,\n)(ClickLoadingSuccess);\n","const ClickLoadingError = ({loading, error, onClick, onReset}) => (\n    <button\n        type=\"button\"\n        onClick={error ? onReset : onClick}\n        disabled={loading === true}\n        className={`btn ${loading !== false && 'btn-primary'} ${error && 'btn-danger'}`}\n    >\n        {\n            loading === true && (\n                <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\" />\n            )\n        }\n        {loading === undefined && !error && 'Click to be Loading, then to be Error'}\n        {loading === true && ' Loading...'}\n        {error && 'Error! Click again to reset'}\n    </button>\n);\n\nexport default ClickLoadingError;\n","import {connect} from 'react-redux';\nimport {createAction} from 'redux-actions';\nimport {compose, get} from 'lodash/fp';\nimport {createSelector} from 'reselect';\nimport {createAsyncAction, idOfAction, createSelectActions, withAsyncActionStateHandler} from 'redux-saga-mate';\nimport * as ActionTypes from '../../actions/types';\nimport ClickLoadingError from '../../components/SimpleButtons/ClickLoadingError';\n\nexport const selectActions = () => createSelectActions(\n    get('actions'),\n    (state, props) => props.actionIds,\n);\n\nconst makeMapStateToProps = () => createSelector(\n    selectActions(),\n    actions => ({\n        loading: get(['onClick', 'isLoading'], actions),\n        error: get(['onClick', 'error'], actions),\n    }),\n);\n\nconst mapDispatchToProps = (dispatch, {actionIds, setActionId, unsetActionId}) => ({\n    onClick: () => {\n        const action = dispatch(\n            createAsyncAction(ActionTypes.ASYNC_NOOP)({to: 'fail'}),\n        );\n        setActionId('onClick', idOfAction(action));\n    },\n    onReset: () => {\n        unsetActionId('onClick');\n        dispatch(createAction(ActionTypes.CLEANUP)(actionIds.onClick));\n    },\n});\n\nconst withRedux = connect(makeMapStateToProps, mapDispatchToProps);\n\nexport default compose(\n    withAsyncActionStateHandler(),\n    withRedux,\n)(ClickLoadingError);\n","const ClickLoading = ({id, loading, onClick}) => (\n    <button\n        type=\"button\"\n        onClick={onClick}\n        disabled={loading === true}\n        className=\"btn btn-primary\"\n    >\n        {`[ ${id} ] `}\n        {loading && (\n            <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\" />\n        )}\n        {loading ? ' Loading...' : 'Click to Loading'}\n    </button>\n);\n\nexport default ClickLoading;\n","import {connect} from 'react-redux';\nimport {get} from 'lodash/fp';\nimport {compose} from 'recompose';\nimport {createSelector} from 'reselect';\nimport {createAsyncAction, idOfAction, createSelectActions, withAsyncActionStateHandler} from 'redux-saga-mate';\nimport * as ActionTypes from '../../actions/types';\nimport ClickLoading from '../../components/SimpleButtons/ClickLoading';\n\nexport const selectActions = () => createSelectActions(\n    get('actions'),\n    (state, props) => props.actionIds,\n);\n\nconst makeMapStateToProps = () => createSelector(\n    selectActions(),\n    actions => ({\n        id: 1,\n        loading: get(['onClick', 'isLoading'], actions),\n    }),\n);\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    onClick: () => {\n        const action = dispatch(createAsyncAction(ActionTypes.ASYNC_NOOP)({to: 'success', foo: 'foo'}));\n        props.setActionId('onClick', idOfAction(action));\n    },\n});\n\nconst withRedux = connect(makeMapStateToProps, mapDispatchToProps);\n\nexport default compose(\n    withAsyncActionStateHandler(),\n    withRedux,\n)(ClickLoading);\n","import {connect} from 'react-redux';\nimport {get} from 'lodash/fp';\nimport {compose} from 'recompose';\nimport {createSelector} from 'reselect';\nimport {createAsyncAction, idOfAction, createSelectActions, withAsyncActionStateHandler} from 'redux-saga-mate';\nimport * as ActionTypes from '../../actions/types';\nimport ClickLoading from '../../components/SimpleButtons/ClickLoading';\n\nexport const selectActions = () => createSelectActions(\n    get('actions'),\n    (state, props) => props.actionIds,\n);\n\nconst makeMapStateToProps = () => createSelector(\n    selectActions(),\n    actions => ({\n        id: 2,\n        loading: get(['onClick', 'isLoading'], actions),\n    }),\n);\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    onClick: () => {\n        const action = dispatch(createAsyncAction(ActionTypes.ASYNC_NOOP)({to: 'success', foo: 'foo'}));\n        props.setActionId('onClick', idOfAction(action));\n    },\n});\n\nconst withRedux = connect(makeMapStateToProps, mapDispatchToProps);\n\nexport default compose(\n    withAsyncActionStateHandler(),\n    withRedux,\n)(ClickLoading);\n","import {connect} from 'react-redux';\nimport {get} from 'lodash/fp';\nimport {compose} from 'recompose';\nimport {createSelector} from 'reselect';\nimport {createAsyncActionUnique, idOfAction, createSelectActions, withAsyncActionStateHandler} from 'redux-saga-mate';\nimport * as ActionTypes from '../../actions/types';\nimport ClickLoading from '../../components/SimpleButtons/ClickLoading';\n\nexport const selectActions = () => createSelectActions(\n    get('actions'),\n    (state, props) => props.actionIds,\n);\n\nconst makeMapStateToProps = () => createSelector(\n    selectActions(),\n    actions => ({\n        id: 3,\n        loading: get(['onClick', 'isLoading'], actions),\n    }),\n);\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    onClick: () => {\n        const action = dispatch(createAsyncActionUnique(ActionTypes.ASYNC_NOOP)({to: 'success', foo: 'foo'}));\n        props.setActionId('onClick', idOfAction(action));\n    },\n});\n\nconst withRedux = connect(makeMapStateToProps, mapDispatchToProps);\n\nexport default compose(\n    withAsyncActionStateHandler(),\n    withRedux,\n)(ClickLoading);\n","import {hot} from 'react-hot-loader/root';\nimport ClickLoadingSuccess from '../../connects/SimpleButtons/ClickLoadingSuccess';\nimport ClickLoadingError from '../../connects/SimpleButtons/ClickLoadingError';\nimport ClickLoading1 from '../../connects/SimpleButtons/ClickLoading1';\nimport ClickLoading2 from '../../connects/SimpleButtons/ClickLoading2';\nimport ClickLoading3 from '../../connects/SimpleButtons/ClickLoading3';\n\nconst SimpleButtons = () => (\n    <>\n        <div className=\"row m-3\">\n            <ClickLoadingSuccess />\n        </div>\n        <div className=\"row m-3\">\n            <ClickLoadingError />\n        </div>\n        <div className=\"row m-3\">\n            [1] and [2] below dispatch same action. (types and payloads are the same)\n        </div>\n        <div className=\"row m-3\">\n            So they will share the same loading state.\n        </div>\n        <div className=\"row m-3\">\n            But [3] will not share the same loading state,\n            even if its type and payload are the same too.\n        </div>\n        <div className=\"row m-3\">\n            Because we make the action unique:\n            <b>Action Type + Action Payload + Action Time = Action Instance.</b>\n        </div>\n        <div className=\"row m-3\">\n            <ClickLoading1 />\n        </div>\n        <div className=\"row m-3\">\n            <ClickLoading2 />\n        </div>\n        <div className=\"row m-3\">\n            <ClickLoading3 />\n        </div>\n    </>\n);\n\nexport default hot(SimpleButtons);\n"],"sourceRoot":""}