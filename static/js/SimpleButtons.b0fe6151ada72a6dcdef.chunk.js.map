{"version":3,"sources":["components/SimpleButtons/index.m.scss","connects/SimpleButtons/ClickLoadingSuccess.js","components/SimpleButtons/ClickLoadingSuccess.jsx","connects/SimpleButtons/ClickLoadingError.js","components/SimpleButtons/ClickLoadingError.jsx","components/SimpleButtons/index.jsx"],"names":["classNames","__webpack_require__","locals","css","bind","style","module","exports","withRedux","connect","createSelector","createSelectActions","get","state","props","actionIds","actions","clicked","onClick","loading","error","dispatch","actionId","idOfAction","createAsyncAction","ActionTypes","to","setActionId","onReset","unsetActionId","compose","withAsyncActionStateHandler","_ref","react_default","a","createElement","type","disabled","className","cx","btn-primary","btn-success","undefined","role","aria-hidden","createAction","btn-danger","hot","Fragment","SimpleButtons_ClickLoadingSuccess","SimpleButtons_ClickLoadingError"],"mappings":"6EAEA,IAAAA,EAAyBC,EAAQ,KACjCC,EAAqBD,EAAQ,KAC7BE,EAAAH,EAAAI,KAAAF,GACA,QAAAG,KAAAH,EAAAC,EAAAE,GAAAH,EAAAG,GACAC,EAAAC,QAAAJ,0KC8BMK,EAAYC,YAtBU,kBAAMC,YALCC,YAC/BC,cAAI,WACJ,SAACC,EAAOC,GAAR,OAAkBA,EAAMC,YAKxB,SAACF,EAAOC,GAAR,OAAkBA,EAAMC,WACxB,SAACC,EAASD,GAAV,MAAyB,CACrBE,UAAWF,EAAUG,QACrBC,QAASP,cAAI,CAAC,UAAW,aAAcI,GACvCI,MAAOR,cAAI,CAAC,UAAW,SAAUI,OAId,SAACK,EAAUP,GAAX,MAAsB,CAC7CI,QAAS,WACL,IAAMI,EAAWC,YAAWF,EACxBG,YAAkBC,IAAlBD,CAA0C,CAACE,GAAI,cAEnDZ,EAAMa,YAAY,UAAWL,IAEjCM,QAAS,WACLd,EAAMe,cAAc,eAMbC,cACXC,cACAvB,EAFWsB,CCpCA,SAAAE,GAAA,IAAEb,EAAFa,EAAEb,QAASC,EAAXY,EAAWZ,MAAOH,EAAlBe,EAAkBf,QAASC,EAA3Bc,EAA2Bd,QAASU,EAApCI,EAAoCJ,QAApC,OACXK,EAAAC,EAAAC,cAAA,UACIC,KAAK,SACLlB,QAASD,EAAUW,EAAUV,EAC7BmB,UAAsB,IAAZlB,EACVmB,UAAWC,IACP,MACA,CACIC,eAA2B,IAAZrB,IAAqBF,EACpCwB,cAAexB,QAAuByB,IAAZvB,MAKlB,IAAZA,GACIc,EAAAC,EAAAC,cAAA,QAAMG,UAAU,mCAAmCK,KAAK,SAASC,cAAY,UAGnF3B,GAAW,2CACA,IAAZE,GAAoB,cACpBF,IAAYG,IAAUD,GAAW,4CCepCX,EAAYC,YAtBU,kBAAMC,YALCC,YAC/BC,cAAI,WACJ,SAACC,EAAOC,GAAR,OAAkBA,EAAMC,YAKxB,SAACF,EAAOC,GAAR,OAAkBA,EAAMC,WACxB,SAACC,EAASD,GAAV,MAAyB,CACrBI,QAASP,cAAI,CAAC,UAAW,aAAcI,GACvCI,MAAOR,cAAI,CAAC,UAAW,SAAUI,OAId,SAACK,EAAUP,GAAX,MAAsB,CAC7CI,QAAS,WACL,IAAMI,EAAWC,YAAWF,EACxBG,YAAkBC,IAAlBD,CAA0C,CAACE,GAAI,WAEnDZ,EAAMa,YAAY,UAAWL,IAEjCM,QAAS,WACLd,EAAMe,cAAc,WACpBR,EAASwB,YAAapB,IAAboB,CAAkC/B,EAAMC,UAAUG,cAMpDY,cACXC,cACAvB,EAFWsB,CCrCA,SAAAE,GAAA,IAAEb,EAAFa,EAAEb,QAASC,EAAXY,EAAWZ,MAAOF,EAAlBc,EAAkBd,QAASU,EAA3BI,EAA2BJ,QAA3B,OACXK,EAAAC,EAAAC,cAAA,UACIC,KAAK,SACLlB,QAASE,EAAQQ,EAAUV,EAC3BmB,UAAsB,IAAZlB,EACVmB,UAAWC,IACP,MACA,CACIC,eAA2B,IAAZrB,EACf2B,aAAc1B,MAKN,IAAZD,GACIc,EAAAC,EAAAC,cAAA,QAAMG,UAAU,mCAAmCK,KAAK,SAASC,cAAY,cAGxEF,IAAZvB,IAA0BC,GAAS,yCACvB,IAAZD,GAAoB,cACpBC,GAAS,iCClBH2B,wBAAI,kBACfd,EAAAC,EAAAC,cAAAF,EAAAC,EAAAc,SAAA,KACIf,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACXL,EAAAC,EAAAC,cAACc,EAAD,OAEJhB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACXL,EAAAC,EAAAC,cAACe,EAAD","file":"static/js/SimpleButtons.b0fe6151ada72a6dcdef.chunk.js","sourcesContent":["\n        // classnames-loader: automatically bind css-modules to classnames\n        var classNames = require(\"!../../../../node_modules/classnames/bind.js\");\n        var locals = require(\"!!../../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../../node_modules/css-loader/dist/cjs.js??ref--5-oneOf-6-2!../../../../node_modules/postcss-loader/src/index.js??postcss!../../../../node_modules/sass-loader/lib/loader.js??ref--5-oneOf-6-4!./index.m.scss\");\n        var css = classNames.bind(locals);\n        for (var style in locals) css[style] = locals[style];\n        module.exports = css;\n    ","import {connect} from 'react-redux';\nimport {get} from 'lodash/fp';\nimport {compose, lifecycle, withState, withProps} from 'recompose';\nimport {createSelector} from 'reselect';\nimport {createAsyncAction, idOfAction, createSelectActions, withAsyncActionStateHandler} from 'redux-saga-mate';\nimport {delay} from '../../utils';\nimport * as ActionTypes from '../../actions/types';\nimport ClickLoadingSuccess from '../../components/SimpleButtons/ClickLoadingSuccess';\n\nexport const selectActions = () => createSelectActions(\n    get('actions'),\n    (state, props) => props.actionIds,\n);\n\nconst makeMapStateToProps = () => createSelector(\n    selectActions(),\n    (state, props) => props.actionIds,\n    (actions, actionIds) => ({\n        clicked: !!actionIds.onClick,\n        loading: get(['onClick', 'isLoading'], actions),\n        error: get(['onClick', 'error'], actions),\n    }),\n);\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    onClick: () => {\n        const actionId = idOfAction(dispatch(\n            createAsyncAction(ActionTypes.ASYNC_NOOP)({to: 'success'})\n        ));\n        props.setActionId('onClick', actionId);\n    },\n    onReset: () => {\n        props.unsetActionId('onClick');\n    },\n});\n\nconst withRedux = connect(makeMapStateToProps, mapDispatchToProps);\n\nexport default compose(\n    withAsyncActionStateHandler(),\n    withRedux,\n)(ClickLoadingSuccess);\n","import cx from './index.m.scss';\n\nexport default ({loading, error, clicked, onClick, onReset}) => (\n    <button\n        type=\"button\"\n        onClick={clicked ? onReset : onClick}\n        disabled={loading === true}\n        className={cx(\n            'btn',\n            {\n                'btn-primary': loading === true || !clicked,\n                'btn-success': clicked && loading === undefined,\n            }\n        )}\n    >\n        {\n            loading === true && (\n                <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\" />\n            )\n        }\n        {!clicked && 'Click to be Loading, then to be Success'}\n        {loading === true && ' Loading...'}\n        {clicked && !error && !loading && 'Success! Click again to reset'}\n    </button>\n);\n","import {connect} from 'react-redux';\nimport {createAction} from 'redux-actions';\nimport {get} from 'lodash/fp';\nimport {compose, lifecycle, withState, withProps} from 'recompose';\nimport {createSelector} from 'reselect';\nimport {createAsyncAction, idOfAction, createSelectActions, withAsyncActionStateHandler} from 'redux-saga-mate';\nimport {delay} from '../../utils';\nimport * as ActionTypes from '../../actions/types';\nimport ClickLoadingError from '../../components/SimpleButtons/ClickLoadingError';\n\nexport const selectActions = () => createSelectActions(\n    get('actions'),\n    (state, props) => props.actionIds,\n);\n\nconst makeMapStateToProps = () => createSelector(\n    selectActions(),\n    (state, props) => props.actionIds,\n    (actions, actionIds) => ({\n        loading: get(['onClick', 'isLoading'], actions),\n        error: get(['onClick', 'error'], actions),\n    }),\n);\n\nconst mapDispatchToProps = (dispatch, props) => ({\n    onClick: () => {\n        const actionId = idOfAction(dispatch(\n            createAsyncAction(ActionTypes.ASYNC_NOOP)({to: 'fail'})\n        ));\n        props.setActionId('onClick', actionId);\n    },\n    onReset: () => {\n        props.unsetActionId('onClick');\n        dispatch(createAction(ActionTypes.CLEANUP)(props.actionIds.onClick));\n    },\n});\n\nconst withRedux = connect(makeMapStateToProps, mapDispatchToProps);\n\nexport default compose(\n    withAsyncActionStateHandler(),\n    withRedux,\n)(ClickLoadingError);\n","import cx from './index.m.scss';\n\nexport default ({loading, error, onClick, onReset}) => (\n    <button\n        type=\"button\"\n        onClick={error ? onReset : onClick}\n        disabled={loading === true}\n        className={cx(\n            'btn',\n            {\n                'btn-primary': loading !== false,\n                'btn-danger': error,\n            }\n        )}\n    >\n        {\n            loading === true && (\n                <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\" />\n            )\n        }\n        {loading === undefined && !error && 'Click to be Loading, then to be Error'}\n        {loading === true && ' Loading...'}\n        {error && 'Error! Click again to reset'}\n    </button>\n);\n","import {hot} from 'react-hot-loader/root';\nimport ClickLoadingSuccess from '../../connects/SimpleButtons/ClickLoadingSuccess';\nimport ClickLoadingError from '../../connects/SimpleButtons/ClickLoadingError';\n\nexport default hot(()=> (\n    <>\n        <div className=\"row m-3\">\n            <ClickLoadingSuccess />\n        </div>\n        <div className=\"row m-3\">\n            <ClickLoadingError />\n        </div>\n    </>\n));\n"],"sourceRoot":""}